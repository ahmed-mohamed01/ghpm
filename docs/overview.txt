This is a GitHub package installer, that also allows you to compare versions against what is available on apt. 

it will be installed to /home/ahmed/.local/bin    (this will be in $PATH)
it will be called with ghpm --option
eg:
        ghpm install junegunn/fzf
        ghpm list
        ghpm update fzf

standard mode is ghpm install [owner/repo], which will fetch from repo, confirm with user and install the latest version of the package.
 - it users the github api to fetch a list of most recent releases, and obtain latest GitHub version. 
 - It will store this in a cache_dir/api-cache.json file. One cached item per repo, and this cache will be used if script is run again.
 - It will get architecture of current system
 - It will filter the list of recent releases and fetch the most suitable binary. Assets will be scored based on a criteria, and 
 - checks against a list for architecture matching. eg:  ".*linux.*x86[_-]64" ".*linux.*amd64"
 - checks for tar.gz first.
 - if no suitable tar.gz found will list as not found.
        Repo: owner/repo
        Latest version: 0.99
        
        This repo does not contain valid binaries for current system. 

        Exiting.
 - if source only, will list that (source only) indyrsf of release assets it will display Source only, no binaries to install. 
        Repo: owner/repo
        Latest version: 0.99
        
        This repo contains source files only. No binearies to install. 

        Exiting.

 - It will check for and get separate completions / man tar.gz
 - It will download the asset and extract it to a temp dir (from cache dir, as any newly downloaded files are copied here as well)
 - it will check if binary is suitable for architecture, check dependencies, check if libc version matches. 
 - t will compile a list of files to be installed. 

This is cached to a dir: 
        $CACHE_DIR/
        ├── api-cache.json        # Keeps current API response cache (full responses.)
        └── repos/
                └── owner_repo/
                        ├── processed_assets_v1.2.3.json  # Processed asset data
                        ├── assets/                       # Downloaded assets
                        │   ├── asset-v1.2.3.tar.gz
                        │   └── asset-v1.2.3.tar.gz.metadata
                        └── extracted/                    # For file listing before install
                        └── v1.2.3/
                                └── file_manifest.json    # Lists files found in extraction

Processed_assets_json will have format: 

        {
        "repo": "owner/repo",
        "version": "1.2.3",
        "processing_date": "2024-01-05T12:00:00Z",
        "system_info": {
                "arch": "x86_64",
                "os": "Linux",
                "libc": "gnu",
                "bits": "64",
                "distro": "ubuntu"
        },
        "version_info": {                          # this is written by the version_comparison function, during batch processing.  
                "github": "1.2.3",
                "apt": "1.0.0",
                "comparison": "github_newer"
        },
        "has_manfiles": false,
        "has_completions": false,
        "has_source": false,
        "chosen_asset": {
                "name": "asset.tar.gz",
                "score": 85,
                "reason": "scoring reasons...",
                "url": "https://..."
        },
        "viable_assets": [...],
        "excluded_assets": [...],
        "man": [...],
        "completions": [...],
        "source": [...]
        }

 - if binary is suitable, it will display the following outout:
Example output:

        Repo: junegunn/fzf
        Latest version: 0.57.0
        Release asset: fzf-0.57.0-linux_amd64.tar.gz

        Files to install:
            fzf  --> /home/ahmed/.local/bin/fzf
            man-1 --> /home/ahmed/.local/share/man/man1/fzf.1
            bash.completions --> /home/ahmed/.local/share/bash/completions

        Proceed to install? [y/N]

ghpm --file [location/file.txt] takes a file as input, and will cycle through the entries in the file. 
- it takes repo-name or | alias as binary name (provided in repos.txt as owner/repo-name | binary-name) binary-name or alias is optional.
- If alias is provided, it will check apt for latest version for that binary. if alias is not provided, it will take repo-name as binary name, and check that against apt, and give apt versoin. 
It will use github api to fetch a list of most recent releases, and obtain latest GitHub version. 
 - It will store this in a cache_dir/api-cache.json file. One cached item per repo, and this cache will be used interactive installer is run again. 
If will get architecture of current system
It will filter the list of recent releases and fetch the most suitable binary
- checks against a list for architecture matching. eg:  ".*linux.*x86[_-]64" ".*linux.*amd64"
- checks for tar.gz first.
- if no suitable tar.gz found will list as not found. 
- if source only, will list that (source only) for GitHub column.
- It will check for and get separate completions / man tar.gz
- [more variants]
It will downlaod this and store in asset cache (cache_dir/assets/owner_repo/asset-name)
 - If file in asset cache is still the newest, this will be used 
 - If a newer file is foiund, it will be downloaded to the the directory for the repo, and older file will be deleted. 
 - On run, script will check for cache older than 90 days and claer them. 
It will compare GitHub and apt and check which version is newest. Newest gets a green * next to it. 
Once it has package names, GitHub version, APT version, asset name and whether or not it needs bo be downloaded, It will give an output:

        Processing (7) repositories from repos.txt:

        Binary          Github       APT          Asset                                             
        ------------------------------------------------------------------------------------------------
        fzf             0.57.0*      0.29.0       fzf-0.57.0-linux_amd64.tar.gz (cached)                     
        micro           2.0.14*      2.0.9        micro-2.0.14-linux-arm.tar.gz (Cached)                  
        zoxide          0.9.6*       0.4.3        zoxide-0.9.6-aarch64-linux-android.tar.gz (cached)        
        eza             0.20.14*     not found    eza_aarch64-unknown-linux-gnu.tar.gz (downloaded)             
        fd              10.2.0*      not found    fd-v10.2.0-aarch64-unknown-linux-gnu.tar.gz (cached)      
        bat             0.24.0*      0.19.0       bat-v0.24.0-aarch64-unknown-linux-gnu.tar.gz (downl...     
        tldr            source       0.6.4        -  

        Skipped repos:
                - tldr-pages/tldr-c-client (no viable assets)
                - Schniz/fnm (no viable assets)

        Dependencies needed:
                No additional dependencies required

        Install all repos? [y/Y] _

Once a GitHub release is chosen:
It will extract the files to a temp dir (from cache dir, as any newly downloaded files are copied here as well) and check for binaries, completions files and man files. LIst of files to be installed will be added to $DATA_DIR/gpi-db.json (called packages.json in the script)
It will check binaries to see if
 - suitable binary for the system architecture
 - any dependencies, and will create a list of dependencies as a list as script is running. 
 - binary name matches repo-name. if binary name provided as | alias, check if it matches alias. If not matching, user will be warned that they do not match, and to check the binary/update the | alias. This will not block install. 
 - once checks are done, and if binary is suitable it will be copied to $INSTALL_DIR
 - It will check if files were properly copied to the dir.
It will copy man files to respective dir, and confirm installed. confirmation does not need to be user facing, but available on debug.

Above only happens if script is run without options. 

has a --list option, which will check database to see if this is something managed by gpi, if so, it will give output like: 

        Packages managed by GH Package installer:

        Package         Version      Location            
        -------------------------------------------------------
        zoxide          0.9.6        /home/ahmed/.local/bin/zoxide
        micro           2.0.14       /home/ahmed/.local/bin/micro
        fzf             0.57.0       /home/ahmed/.local/bin/fzf

has a --update option which will one option, a package name
 - check db to see if its is managed by gpi. if managed by gpi, it will check current installed version (from db) and call the github releases function to fetch proper release for this. It will call the same functions that checks binaries and ensure same procedure is followed (ensure correct architecture, install man pages, install shell-completions, check dependencies). Then it will display:
  - $ ghpm update zoxide
        Checking for update for zoxide...
                        
        Package      Current    Latest    Release asset     
        --------------------------------------------------------------------------------
        zoxide       0.9.6      0.9.7     zoxide-0.9.7-amd64-linux-musl.tar.gz

        Additional dependencies: No

        Update found! 0.9.6 --> 0.9.7  Proceed? [y/N]

  - $ ghpm upate

        Checking for updates...
                        
        Package      Current    Latest    Release asset     
        --------------------------------------------------------------------------------
        zoxide       0.9.6      0.9.7     zoxide-0.9.7-amd64-linux-musl.tar.gz
        bat          1.1.0      3.2.0     bat-3.2.0-amd64-linux-musl.tar.gz  

        Update found! 
                zoxide 0.9.6 --> 0.9.7  
                bat 1.1.0 --> 3.2.0 

        Proceed? [y/N]

   - If no updates:

    $ ghpm update zoxide

    Checking for update for zoxide...
                        
        Package      Current    Latest    Release asset     
        --------------------------------------------------------------------------------
        zoxide       0.9.6      0.9.6     zoxide-0.9.6-amd64-linux-musl.tar.gz

    zoxide is up to date (v 0.9.6).

    $ ghpm update

     Checking for updates...
                        
        Package      Current    Latest    Release asset     
        --------------------------------------------------------------------------------
        zoxide       0.9.6      0.9.7     zoxide-0.9.7-amd64-linux-musl.tar.gz
        bat          1.1.0      3.2.0     bat-3.2.0-amd64-linux-musl.tar.gz  

        No updates available. 


 If proceed, it will overwrite the installed versoin with current verison, ensureing the db is updated. 

Has a --remove [package] option
  - check if package is in db  
  - if in db, check files to be removed in package.files section
  - removes the files and update the db to remove the empty
 
        Remove zoxide v0.9.6?

        This will remove the following files:
                /home/ahmed/.local/bin/zoxide
                /home/ahmed/.local/share/man/man1/zoxide
                /home/ahmed/.local/share/completions/zsh-completions/_zoxide

        Proceed? [y/N]

  Once confirmed, it will make the changes and update db.

Has a --version flag that displays current version. 

        v0.02.1

Has a --help that displays help message with usage.
        Usage: ghpm <command> [options]
        Commands:
                install <owner/repo>    Install a package from GitHub
                remove <package>        Remove an installed package
                update <package>        Check for updates for the <package>
                update--all             Check for updates for all installed packages
                --file <file.txt>       Batch processed repositories provided in owner/repo format in a txt file. 
                --list                  List installed packages
                --clear-cache           Clear the cache
                --version               Show version

has a --clear-cache that will clear the cache (removes the $CACHE_DIR/assets and clears $CACHE_DIR/api-cache.json)

        Clearing cache...
        Cache cleared. 


## TODO


db schema WIP:


 {
   "fzf" :  {
      "repo": "owner/repo",
      "ghpm_id": "234lkafsasdl",
      "version": "1.2.3",
      "installed_date": "2024-01-05T12:00:00Z",
      "last_updated": "2024-01-05T12:00:00Z",
      "installed_files": [
        {
        "name": "fzf",
        "location": "install/dir/fzf",
        "type": "binary",
        }
        {
        "name": "fzf.bash",
        "location": "bash/completions/dir/fzf.bash",
        "type": "completions",
        }
      ]       
        },
   "zoxide" {
        "repo": "ajeetdsouza/zoxide"
        ....
   }

prep_install_files()
        - downloads and extracts needed files (main asset, and any completions or manfiles if these are separate)
        - extracts files to the same $extract_dir
        - loops through and searchs the $extract_dir for files and populates 2 arrays
                sorted_files=(
                        [binary]="{$extract_dir}/eza"
                        [zsh-completion]="{$extract_dir}/_eza"
                        [man1]="{$extract_dir}/eza.1"
                )
                sorted_install_map=(
                        [eza]="${INSTALL_DIR}/eza"
                        [eza.1]="${MAN_PATH}/man1/eza.1"
                        [_eza]="${ZSH-COMPLETIONS-DIR}/_eza"
                )

process_installation()


        - copies files to needed locations. 
        - should be able to mv ${found_files[binary]} ${install_map[binary]} to copy files. 
        - after installation, it will populate the db with the files installed = install_map[@]    # needs the final location of installed files so it can be removed later

- Validate input during install. 
 - user enters something 
 - for all installs this needs to be in owner/repo --else inform and Exiting
 - checks if owner/repo is in db -- if not proceed to api call (currently it checks binary name, ( part after /)) this results in false matches. 
   - if in db, checks latest update, and inform user packages is installed, up to date/has update.
 - when api called, in query_github_api, if repo is not found it will exit with 2, if other errors it will exit with 1. 
   - this exit code will be checked by the function calling it, and will inform user.
   - in standaline install, this will respect silent flag
 
- batch install should also validate abouve in each line: check in owner/repo | alias format, else skip the line. 
   - batch install can utilize alias (= binary name) to check apt versions. otherwise its not really needed. 
   - if repo correct format, check if installed, if installed and managed by script, checks update and informs usesr this can be updated. 
   - if installed and managed externally, added to skipped repos list, reason: installed, managed externally. 
   - if we get here, repo is valid and not installed, and api is called. will check for error 2 and skip, skip reason: repo not found. 
   - if no errors, checks assets list - if no chosen asset, no viable assets but source exists, skip repo - no viable assets
   - if no viable assets but has source files - still skip but reason is source only repo
   - if valid input, chosen asset present - added to repos to install. 

- update is called with S0 update <package name>
   - check if package is in the install db
   - if not in db, inform user. is not managed by script, and exit.
   - if installed, uses associated repo to check updates. 




- if 
## TODO
[] Current implementatoin does not differentiate ajeetdsouza/zoxide  from Haizzz/zoxide when attempting to install.
   - need to improve check_package()
[] need to include binary checking in install, batch install and update
[] 